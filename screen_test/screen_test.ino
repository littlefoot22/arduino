/*********
  Rui Santos
  Complete project details at https://randomnerdtutorials.com  
  https://javl.github.io/image2cpp/ -> white background
  GMP -> greyscale -> flatten image -> export to bitmap
*********/

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_NeoPixel.h>
#define NUMPIXELS        25
Adafruit_NeoPixel pixels(NUMPIXELS, 6, NEO_GRB + NEO_KHZ800);

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

unsigned long startTime; 
unsigned long buttonStartTime; 
unsigned long frame_1_startTime; 

unsigned long bossHexStartTime; 
unsigned long shiftLeftStartTime; 
unsigned long poryStartTime; 

uint8_t frame_number_drag = 0; 
uint8_t drag_loops = 0; 

uint8_t frame_number = 0; 
uint8_t frame_number_sword = 0;
uint8_t frame_number_pory = 0;
uint8_t frame_sword_mov = 0;
uint8_t num_stack_len = 0;

uint8_t brightness = 120; 

uint8_t operation = 0; 
uint16_t j = 0;

uint8_t frame_id = 0;
uint8_t meter = 0;

uint8_t signed_bits = 0;
uint8_t shift_bits = 0;

//unsigned int fadeDirection = 1; 

bool rotate = true; 

byte randomByte = 0xff;

byte boss_byte_0 = 0xff;
byte boss_byte_1 = 0xff;
byte boss_byte_2 = 0xff;
byte boss_byte_3 = 0xff;

byte playerMode = 0;

int screenWidth;
int screenHeight;

byte playerByte1 = 0xff;
byte playerByte2 = 0xff;
byte playerByte3 = 0xff;
byte playerByte4 = 0xff;
byte new_value = 0xff;

uint8_t operator_id = 0;
uint8_t operator_pos = 0;

int BUTTON_DELAY = 100;


// 'sword', 23x54px
const unsigned char epd_bitmap_sword [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x81, 0x00, 0x01, 
  0xc3, 0x00, 0x01, 0xc7, 0x00, 0x01, 0x8f, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 
  0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 
  0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 
  0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 
  0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 
  0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x85, 0x00, 0x30, 0x00, 0x18, 0x7f, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00
};

// 'sword', 54x23px
const unsigned char epd_bitmap_sword_90 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xc0, 0x30, 
  0x00, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x27, 0xac, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x27, 0xa8, 0x9f, 0xff, 0xff, 0xfe, 0x00, 0x30, 0x00, 0xbf, 0xff, 0xff, 
  0xff, 0x00, 0x30, 0x00, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xc0, 
  0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00
};

// 'sword', 23x54px
const unsigned char epd_bitmap_sword_180 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0xff, 0xfc, 0x30, 0x00, 0x18, 0x01, 0x43, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 
  0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 
  0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 
  0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 
  0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 
  0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0xe3, 0x00, 0x01, 0xc7, 0x00, 
  0x01, 0x87, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00
};

// 'sword', 54x23px
const unsigned char epd_bitmap_sword_270 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x30, 0x03, 
  0xff, 0xff, 0xff, 0xf4, 0x00, 0x30, 0x01, 0xff, 0xff, 0xff, 0xe4, 0x57, 0x90, 0x00, 0x00, 0x00, 
  0x00, 0x04, 0xd7, 0x90, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 
  0x00, 0x30, 0x0f, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00
};




const unsigned char epd_bitmap_um_frame1 [] PROGMEM = {
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xef, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x7f, 
  0xf0, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0xfe, 0x70, 0x7f, 
  0xff, 0xff, 0xff, 0xc1, 0xfc, 0x78, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x78, 0x39, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x10, 0x1b, 0xff, 0xff, 0xff, 0xff, 0x9c, 0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0x24, 
  0x00, 0x0f, 0xff, 0xc0, 0xff, 0xff, 0x4c, 0x00, 0x3f, 0xff, 0x00, 0xff, 0xfe, 0x58, 0x01, 0xff, 
  0xfd, 0xc1, 0xff, 0xff, 0x70, 0x03, 0xff, 0xfb, 0xe1, 0xff, 0xfe, 0x03, 0x03, 0xff, 0xf0, 0xf3, 
  0xff, 0xfc, 0x03, 0x03, 0xff, 0xe0, 0x73, 0xff, 0xfc, 0x02, 0x03, 0xff, 0xc0, 0x77, 0xff, 0xfc, 
  0x00, 0x07, 0xff, 0xc0, 0x37, 0xff, 0xfe, 0x00, 0x07, 0xff, 0x80, 0x2f, 0xff, 0xff, 0x00, 0x07, 
  0xff, 0x80, 0x1f, 0xff, 0xff, 0xc0, 0x07, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x03, 0xc0, 0x07, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x1b, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x25, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x00, 0x32, 0xff, 
  0xff, 0xff, 0xf8, 0x09, 0x40, 0x12, 0xff, 0xff, 0xff, 0xf0, 0x09, 0x60, 0x0c, 0x7f, 0xff, 0xff, 
  0xf0, 0x09, 0x70, 0x60, 0x7f, 0xff, 0xff, 0xf0, 0x46, 0xf8, 0x70, 0x7f, 0xff, 0xff, 0xf0, 0x40, 
  0xf8, 0x70, 0x7f, 0xff, 0xff, 0xf0, 0x40, 0xf8, 0x78, 0x3f, 0xff, 0xff, 0xe0, 0xc0, 0xf0, 0x78, 
  0x3f, 0xff, 0xff, 0xe0, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xe1, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 
  0xff, 0xc1, 0x83, 0xf1, 0xf0, 0x7f, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe3, 
  0x07, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_um_frame2 [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x3f, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xe1, 0x7f, 0x80, 0x3f, 
  0xff, 0xff, 0xff, 0xe0, 0x7e, 0x70, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0xfc, 0x38, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x78, 0x39, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x1b, 0xff, 0xff, 0xff, 0xff, 0x9c, 
  0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x4c, 0x00, 0x3f, 
  0xff, 0xef, 0xff, 0xfe, 0x58, 0x01, 0xff, 0xff, 0x80, 0x7f, 0xff, 0x70, 0x03, 0xff, 0xfe, 0xe0, 
  0x7f, 0xfe, 0x02, 0x03, 0xff, 0xfd, 0xf0, 0xff, 0xfc, 0x03, 0x03, 0xff, 0xf8, 0x70, 0xff, 0xfc, 
  0x02, 0x03, 0xff, 0xf0, 0x39, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xe0, 0x39, 0xff, 0xfe, 0x00, 0x07, 
  0xff, 0xe0, 0x1b, 0xff, 0xff, 0x00, 0x07, 0xf8, 0x40, 0x1b, 0xff, 0xff, 0xc0, 0x03, 0xc0, 0x00, 
  0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x1b, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x25, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x00, 0x32, 0xff, 
  0xff, 0xff, 0xf8, 0x09, 0x40, 0x12, 0xff, 0xff, 0xff, 0xf0, 0x09, 0x60, 0x0c, 0x7f, 0xff, 0xff, 
  0xf0, 0x09, 0x70, 0x60, 0x7f, 0xff, 0xff, 0xf0, 0x46, 0xf8, 0x70, 0x7f, 0xff, 0xff, 0xf0, 0x40, 
  0xf8, 0x70, 0x7f, 0xff, 0xff, 0xf0, 0x40, 0xf8, 0x78, 0x3f, 0xff, 0xff, 0xe0, 0xc0, 0xf0, 0x78, 
  0x3f, 0xff, 0xff, 0xe0, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xe1, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 
  0xff, 0xc1, 0x83, 0xf1, 0xf0, 0x7f, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe3, 
  0x07, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_um_frame3 [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x3f, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf0, 0x3f, 
  0xff, 0xff, 0xff, 0xe3, 0x3f, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xe1, 0x7e, 0x70, 0xff, 0xff, 0xff, 
  0xff, 0xe0, 0x7c, 0x39, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xf8, 0x3b, 0xff, 0xff, 0xff, 0xff, 0xc0, 
  0x10, 0x1b, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0x9c, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x58, 0x03, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0x70, 0x03, 0xff, 0xfe, 0xe0, 0x3f, 0xfe, 
  0x02, 0x03, 0xff, 0xfd, 0xe0, 0xff, 0xfc, 0x03, 0x03, 0xff, 0xf8, 0x70, 0xff, 0xfc, 0x02, 0x07, 
  0xff, 0xe0, 0x39, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xe0, 0x39, 0xff, 0xfe, 0x00, 0x07, 0xf8, 0x40, 
  0x1b, 0xff, 0xff, 0x80, 0x03, 0xc0, 0x00, 0x1b, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x17, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1b, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x25, 0xff, 
  0xff, 0xff, 0xf8, 0x06, 0x00, 0x35, 0xff, 0xff, 0xff, 0xf8, 0x09, 0x40, 0x15, 0xff, 0xff, 0xff, 
  0xf0, 0x09, 0x60, 0x0c, 0x7f, 0xff, 0xff, 0xf0, 0x09, 0x70, 0x60, 0x7f, 0xff, 0xff, 0xf0, 0x46, 
  0xf8, 0x70, 0x7f, 0xff, 0xff, 0xf0, 0x40, 0xf8, 0x78, 0x3f, 0xff, 0xff, 0xe0, 0xc0, 0xf0, 0x78, 
  0x3f, 0xff, 0xff, 0xe0, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xe1, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 
  0xff, 0xc1, 0x83, 0xf1, 0xf0, 0x7f, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe3, 
  0x07, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_um_frame4 [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xe0, 0x7f, 
  0xff, 0xff, 0xff, 0xec, 0x3f, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x60, 0x7f, 0xff, 0xff, 
  0xff, 0xe3, 0x3e, 0x78, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x7c, 0x39, 0xff, 0xff, 0xff, 0xff, 0xe0, 
  0x78, 0x1b, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xf0, 0x17, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x20, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0x98, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x28, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xfe, 0x58, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x58, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 
  0x50, 0x03, 0xff, 0xff, 0x80, 0xff, 0xff, 0x72, 0x03, 0xff, 0xfe, 0xe0, 0x7f, 0xfe, 0x03, 0x03, 
  0xff, 0xf3, 0xe0, 0x7f, 0xfc, 0x02, 0x07, 0xff, 0xe0, 0xe1, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xc0, 
  0x73, 0xff, 0xfc, 0x00, 0x07, 0xf8, 0x40, 0x73, 0xff, 0xfe, 0x00, 0x03, 0xc0, 0x00, 0x37, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x37, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x08, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1b, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x25, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x00, 0x32, 0xff, 0xff, 0xff, 
  0xf8, 0x09, 0x40, 0x12, 0xff, 0xff, 0xff, 0xf0, 0x09, 0x60, 0x0c, 0x7f, 0xff, 0xff, 0xf0, 0x09, 
  0x70, 0x60, 0x7f, 0xff, 0xff, 0xf0, 0x46, 0xf8, 0x70, 0x3f, 0xff, 0xff, 0xe0, 0xc0, 0xf0, 0x78, 
  0x3f, 0xff, 0xff, 0xe0, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xe1, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 
  0xff, 0xc1, 0x83, 0xf1, 0xf0, 0x7f, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe3, 
  0x07, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_um_frame5 [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x7f, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xec, 0x7f, 0xe0, 0x7f, 0xff, 0xff, 
  0xff, 0xee, 0x7f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xd7, 0x3e, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xe1, 
  0x7c, 0x73, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x78, 0x77, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xf0, 0x1b, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x30, 0x17, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xb8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x48, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfe, 
  0x18, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xb0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x70, 0x03, 
  0xff, 0xff, 0x81, 0xff, 0xff, 0x42, 0x03, 0xff, 0xfc, 0xe0, 0x7f, 0xfe, 0x03, 0x07, 0xff, 0xf9, 
  0xe0, 0x7f, 0xfc, 0x02, 0x07, 0xf8, 0x40, 0x70, 0xff, 0xfc, 0x00, 0x03, 0xc0, 0x00, 0x71, 0xff, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x73, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x37, 0xff, 0xff, 0xa0, 
  0x00, 0x00, 0x00, 0x37, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x04, 0xbf, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1b, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x25, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x00, 0x32, 0xff, 0xff, 0xff, 
  0xf8, 0x09, 0x40, 0x12, 0xff, 0xff, 0xff, 0xf0, 0x09, 0x60, 0x0c, 0x7f, 0xff, 0xff, 0xf0, 0x09, 
  0x70, 0x60, 0x7f, 0xff, 0xff, 0xf0, 0x46, 0xf8, 0x70, 0x3f, 0xff, 0xff, 0xe0, 0xc0, 0xf0, 0x78, 
  0x3f, 0xff, 0xff, 0xe0, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xe1, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 
  0xff, 0xc1, 0x83, 0xf1, 0xf0, 0x7f, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe3, 
  0x07, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_um_frame6 [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xe0, 0x7f, 
  0xff, 0xff, 0xff, 0xec, 0x3f, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x60, 0x7f, 0xff, 0xff, 
  0xff, 0xe3, 0x3e, 0x78, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x7c, 0x39, 0xff, 0xff, 0xff, 0xff, 0xe0, 
  0x78, 0x1b, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xf0, 0x17, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x20, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0x98, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x28, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xfe, 0x58, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x58, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 
  0x50, 0x03, 0xff, 0xff, 0x80, 0xff, 0xff, 0x72, 0x03, 0xff, 0xfe, 0xe0, 0x7f, 0xfe, 0x00, 0x03, 
  0xff, 0xf3, 0xe0, 0x7f, 0xfc, 0x00, 0x07, 0xff, 0xe0, 0xe1, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xc0, 
  0x73, 0xff, 0xfc, 0x00, 0x07, 0xf8, 0x40, 0x73, 0xff, 0xfe, 0x00, 0x03, 0xc0, 0x00, 0x37, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x37, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x08, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1b, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x25, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x00, 0x32, 0xff, 0xff, 0xff, 
  0xf8, 0x09, 0x40, 0x12, 0xff, 0xff, 0xff, 0xf0, 0x09, 0x60, 0x0c, 0x7f, 0xff, 0xff, 0xf0, 0x09, 
  0x70, 0x60, 0x7f, 0xff, 0xff, 0xf0, 0x46, 0xf8, 0x70, 0x3f, 0xff, 0xff, 0xe0, 0xc0, 0xf0, 0x78, 
  0x3f, 0xff, 0xff, 0xe0, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xe1, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 
  0xff, 0xc1, 0x83, 0xf1, 0xf0, 0x7f, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe3, 
  0x07, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_binary [] PROGMEM = {
  0xff, 0xf7, 0xff, 0xbf, 0xfc, 0xff, 0xef, 0xff, 0xff, 0xfc, 0xff, 0xf7, 0xff, 0xbf, 0xfc, 0xff, 
  0xef, 0xff, 0xff, 0xfc, 0xc0, 0x76, 0x01, 0xb8, 0x0c, 0xc0, 0x6c, 0x03, 0xf3, 0x8c, 0xce, 0x37, 
  0x87, 0xb9, 0x8c, 0xfc, 0x6c, 0x63, 0xf3, 0x8c, 0xce, 0x77, 0x87, 0xb9, 0x8c, 0xfc, 0x6c, 0x63, 
  0xf3, 0x8c, 0xc0, 0xf1, 0x87, 0x39, 0x8c, 0xc0, 0x6c, 0x63, 0xf0, 0x0c, 0xc0, 0xf1, 0x87, 0x39, 
  0x8c, 0xc0, 0x6c, 0x73, 0xf0, 0x0c, 0xce, 0x37, 0x87, 0xb9, 0x8c, 0xcc, 0x6c, 0x7f, 0xff, 0x8c, 
  0xce, 0x37, 0x01, 0xb9, 0x8c, 0xcc, 0x6c, 0x7f, 0xff, 0x8c, 0xc0, 0x77, 0x01, 0xb9, 0x8c, 0xc0, 
  0x6c, 0x60, 0x70, 0x0c, 0xff, 0xf7, 0xff, 0xbf, 0xfc, 0xff, 0xef, 0xe0, 0x7f, 0xfc, 0xff, 0xf7, 
  0xff, 0xbf, 0xfc, 0xff, 0xef, 0xe0, 0x7f, 0xfc
};

// 'blade', 70x12px
const unsigned char epd_bitmap_blade [] PROGMEM = {
  0x3f, 0xfe, 0xff, 0x03, 0xff, 0xc0, 0x7f, 0x3f, 0xfc, 0x3f, 0xfe, 0xff, 0x03, 0xff, 0xcf, 0x7f, 
  0x3f, 0xfc, 0x38, 0x0e, 0xe7, 0x03, 0x00, 0xcf, 0xe3, 0x30, 0x0c, 0x38, 0xce, 0xe3, 0x03, 0xfc, 
  0xcf, 0xe3, 0x33, 0x8c, 0x38, 0xde, 0xe3, 0x03, 0xfc, 0xcc, 0x03, 0x33, 0x8c, 0x38, 0x1e, 0xe3, 
  0x03, 0x00, 0xcc, 0x63, 0x30, 0x0c, 0x38, 0x1e, 0xe3, 0x03, 0x00, 0xcc, 0x63, 0x30, 0x0c, 0x38, 
  0xce, 0xe3, 0xfb, 0x1c, 0xcc, 0x63, 0x33, 0xfc, 0x38, 0xce, 0xe3, 0xfb, 0x1c, 0xcc, 0x63, 0x33, 
  0xfc, 0x38, 0x0e, 0xe0, 0x3b, 0x00, 0xcc, 0x03, 0x30, 0x0c, 0x3f, 0xfe, 0xff, 0xfb, 0xff, 0xcf, 
  0xff, 0x3f, 0xfc, 0x3f, 0xfe, 0xff, 0xfb, 0xff, 0xcf, 0xff, 0x3f, 0xfc
};


//const unsigned char epd_bitmap_2s [] PROGMEM = {
//  0x00, 0x70, 0x00, 0x00, 0x70, 0x00, 0xfe, 0x63, 0xf8, 0xff, 0xef, 0xf8, 0x03, 0x8c, 0x00, 0x3e, 
//  0x03, 0xe0, 0x7e, 0x03, 0xe0, 0xe0, 0x00, 0x38, 0xff, 0x8f, 0xf8
//};


const unsigned char epd_bitmap_2s [] PROGMEM = {
  0x00, 0x70, 0x00, 0x00, 0x70, 0x00, 0xfe, 0x63, 0xf8, 0xff, 0xef, 0xf8, 0x03, 0x8c, 0x00, 0x3e, 
  0x03, 0xe0, 0x7e, 0x03, 0xe0, 0xe0, 0x00, 0x38, 0xff, 0x8f, 0xf8
};


const unsigned char epd_bitmap_comp [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x1f, 0x98, 0x6f, 0xe6, 0x03, 
  0xfd, 0x86, 0xff, 0x61, 0xbf, 0xc0, 0x36, 0x7f, 0x9f, 0x9f, 0xef, 0xf6, 0x03, 0xfd, 0xfe, 0xff, 
  0x79, 0xbf, 0xc0, 0x36, 0x61, 0xb0, 0xdf, 0xec, 0x36, 0x03, 0x01, 0xfe, 0xc0, 0x79, 0x86, 0x00, 
  0x36, 0x60, 0x30, 0xdb, 0x6f, 0xe6, 0x03, 0xf9, 0xb6, 0xfe, 0x6d, 0x86, 0x00, 0x36, 0x60, 0x30, 
  0xdb, 0x6f, 0xe6, 0x03, 0xf9, 0xb6, 0xfe, 0x6d, 0x86, 0x00, 0x36, 0x61, 0xb0, 0xd8, 0x6c, 0x06, 
  0x03, 0x01, 0x86, 0xc0, 0x67, 0x86, 0x00, 0x00, 0x7f, 0xbf, 0xd8, 0x6c, 0x07, 0xfb, 0xfd, 0x86, 
  0xff, 0x67, 0x86, 0x00, 0x36
};


const unsigned char epd_bitmap_drag1 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x0f, 0x0c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x14, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x07, 0x38, 
  0x2b, 0x88, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x64, 0x54, 0x10, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xfe, 0x88, 0xa8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf7, 0x20, 0xd0, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x01, 0xb0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x40, 0x01, 0x9c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xd3, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xd0, 0x3c, 0x00, 0x00, 0x60, 0x00, 0x00, 0x01, 0x00, 0x08, 
  0xe8, 0x30, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x02, 0x00, 0x07, 0xe8, 0x40, 0x00, 0x07, 0xf8, 0x40, 
  0x00, 0x02, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x1f, 0xf8, 0xc0, 0x00, 0x02, 0x10, 0x00, 0x10, 0x00, 
  0x00, 0x7f, 0xff, 0xc0, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x80, 0x01, 0x80, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x40, 0x34, 0x20, 0x70, 0x7f, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0b, 0xfc, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x20, 0x00, 0x10, 
  0x02, 0x78, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x18, 0x00, 0x00, 0x80, 0x00, 
  0x00, 0x10, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x10, 0x06, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x13, 0xf0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  0x10, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x30, 0x00, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x04, 0xf8, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x1a, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xff, 0x03, 0xc0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xe3, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xc1, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'drag2', 74x59px
const unsigned char epd_bitmap_drag2 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x60, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xff, 0xf7, 0xe0, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x61, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xc0, 
  0x00, 0x00, 0x01, 0x07, 0xff, 0xff, 0xff, 0x80, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 
  0x7f, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x08, 0x00, 0x01, 0x80, 0x00, 0x00, 
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x54, 0x00, 0x33, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x94, 0x30, 0x48, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  0x74, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x02, 0x00, 0x00, 0xf2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x0a, 0x40, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x30, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xfc, 0x0f, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x0f, 
  0x8f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xdf, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x07, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char epd_bitmap_drag3 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x64, 0x0f, 0xf8, 0x18, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x0b, 0x8b, 0xff, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x64, 0x54, 0x1f, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x02, 0x88, 0xa8, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x07, 0x20, 0xd0, 0x10, 
  0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x1c, 0x01, 0xb0, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x9c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xd3, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xd0, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 
  0xe8, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0xe8, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x02, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 0x10, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 
  0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x01, 0x7f, 0x80, 0x40, 0x34, 0x20, 0x40, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb0, 
  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x07, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 
  0xff, 0x0f, 0x87, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x83, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const unsigned char epd_bitmap_drag4 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x04, 0xe0, 0x07, 0xff, 0xc0, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x03, 0x3e, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x33, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x94, 0x30, 0x48, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  0x74, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x02, 0x00, 0x00, 0xf2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x2a, 0x40, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x0c, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x03, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x97, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x70, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'drag5', 74x59px
const unsigned char epd_bitmap_drag5 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
  0x0a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1c, 0x0a, 0x90, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x05, 0xc2, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1c, 0x16, 0x88, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xc0, 0x29, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x78, 0x04, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0e, 0xf8, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x04, 0x00, 0x01, 0xf0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x90, 0x00, 0x40, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x10, 
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x17, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 
  0x60, 0x04, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x04, 0x0c, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0x18, 0xf2, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'drag6', 74x59px
const unsigned char epd_bitmap_drag6 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 
  0x7a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x1f, 0xfa, 0x10, 0x00, 0x00, 0x00, 0x00, 
  0x06, 0xf9, 0xc1, 0xc3, 0xf1, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x07, 0x1f, 0xb6, 0x88, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xc0, 0x29, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x78, 0x04, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0e, 0xf8, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x04, 0x00, 0x01, 0xf0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x01, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x90, 0x00, 0x40, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x10, 
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x17, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 
  0x60, 0x04, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x04, 0x0c, 0x20, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0x18, 0xf2, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 
  0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xef, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x8b, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


// 'pory1', 48x48px
const unsigned char epd_bitmap_pory1 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x03, 0xcc, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xbf, 0x60, 
  0x00, 0x00, 0x07, 0xfd, 0xb7, 0xa0, 0x00, 0x00, 0x3f, 0xaa, 0xdf, 0xb0, 0x00, 0x00, 0x3d, 0x55, 
  0x6f, 0x70, 0x00, 0x00, 0x00, 0x02, 0xb0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x3c, 0x00, 0x03, 0x00, 
  0x00, 0x00, 0xea, 0x40, 0x00, 0x00, 0x00, 0x03, 0xd5, 0x70, 0x00, 0x00, 0x00, 0x0f, 0xaa, 0x78, 
  0x00, 0x00, 0x00, 0x2a, 0x15, 0x7e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x0a, 
  0x00, 0x1f, 0x00, 0x00, 0x00, 0x14, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x70, 0x00, 0x00, 0x75, 0x00, 0x00, 
  0xfa, 0x00, 0x00, 0xfa, 0x00, 0x01, 0x7d, 0x00, 0x01, 0xe9, 0x00, 0x02, 0xae, 0x00, 0x01, 0x50, 
  0x00, 0x05, 0x54, 0x00, 0x02, 0xa0, 0x00, 0x0a, 0xa8, 0x00, 0x05, 0x40, 0x00, 0x05, 0x50, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'pory2', 48x48px
const unsigned char epd_bitmap_pory2 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x03, 0xcc, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xbf, 0x60, 
  0x00, 0x00, 0x07, 0xfd, 0xb7, 0xa0, 0x00, 0x00, 0x3f, 0xaa, 0xdf, 0xb0, 0x00, 0x00, 0x3d, 0x55, 
  0x6f, 0x70, 0x00, 0x00, 0x00, 0x02, 0xb0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};




uint8_t buttonState_8 = 0;
uint8_t buttonState_7 = 0;
uint8_t buttonState_2 = 0;
uint8_t buttonState_4 = 0;

void setup() {

  Serial.begin(115200);
  
  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)
  pixels.setBrightness(10); // not so bright
//  pixels.setPixelColor(0, pixels.Color(255,0,0));
//  pixels.setPixelColor(1, pixels.Color(255,0,0));
//
//  pixels.setPixelColor(2, pixels.Color(255,128,0));
//  pixels.setPixelColor(3, pixels.Color(255,128,0));
//
//
//  pixels.setPixelColor(4, pixels.Color(0,0,255));
//  pixels.setPixelColor(5, pixels.Color(0,0,255));
//  pixels.setPixelColor(6, pixels.Color(0,0,255));
//  pixels.setPixelColor(7, pixels.Color(0,0,255));
//  pixels.setPixelColor(8, pixels.Color(0,0,255));
//  pixels.setPixelColor(9, pixels.Color(0,0,255));
//  pixels.setPixelColor(10, pixels.Color(0,0,255));
//  pixels.setPixelColor(11, pixels.Color(0,0,255));
//  pixels.setPixelColor(12, pixels.Color(0,0,255));
//  pixels.setPixelColor(13, pixels.Color(0,0,255));
//  pixels.setPixelColor(14, pixels.Color(0,0,255));
//  pixels.setPixelColor(15, pixels.Color(0,0,255));
//  pixels.setPixelColor(16, pixels.Color(0,0,255));
//  pixels.setPixelColor(17, pixels.Color(0,0,255));
//  pixels.setPixelColor(18, pixels.Color(0,0,255));
//  pixels.setPixelColor(19, pixels.Color(0,0,255));
//  pixels.setPixelColor(20, pixels.Color(0,0,255));
//  pixels.setPixelColor(21, pixels.Color(0,0,255));
//  pixels.setPixelColor(22, pixels.Color(0,0,255));
//  pixels.setPixelColor(23, pixels.Color(0,0,255));
//  pixels.setPixelColor(24, pixels.Color(255,128,0)); 
//  pixels.setPixelColor(25, pixels.Color(255,128,0)); 

  pinMode(2, INPUT_PULLUP);
  pinMode(8, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
  pinMode(7, INPUT_PULLUP);


  pixels.show(); // This sends the updated pixel color to the hardware.
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }

  pinMode(11, OUTPUT);
  digitalWrite(11, HIGH);
  
  delay(2000); // Pause for 2 seconds
  Serial.begin(9600);

  pinMode(8, INPUT_PULLUP);
  pinMode(7, INPUT_PULLUP);
  pinMode(2, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
  screenWidth = display.width();
  screenHeight = display.height();
  // Clear the buffer.
  display.clearDisplay();


  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(WHITE);        // Draw white text
  display.setCursor(20,20);             // Start at top-left corner
  display.display();
  randomSeed(analogRead(0));

  startTime = millis();
  bossHexStartTime = millis();
}


uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if (WheelPos < 85) {
    return pixels.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else if (WheelPos < 170) {
    WheelPos -= 85;
    return pixels.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  } else {
    WheelPos -= 170;
    return pixels.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  }
}


void rainbow(uint8_t wait) {
  if( startTime + wait < millis() ) {
    uint16_t i;

    for(i=4; i<pixels.numPixels()-1; i++) {
      if (random(pixels.numPixels()) == i)
        pixels.setPixelColor(i,255, 255, 255);
      else
        pixels.setPixelColor(i, Wheel((i+j) & 255));  
        j++;
    }
    pixels.show();
  }
}

//void fade(uint8_t wait) {
//  if( startTime + wait < millis() ) {
//    
//    // Change the brightness
//    brightness += 5 * fadeDirection; // Adjust speed of fade
//    pixels.setPixelColor(0,brightness, brightness, brightness);
//    pixels.setPixelColor(1,brightness, brightness, brightness);
//    pixels.show();
//
//    // Change the direction of the fade
//    if (brightness < 1 || brightness > 255) {
//      fadeDirection *= -1; // Reverse the direction
//    }
//  }
//}

byte rotate_hex(uint8_t pos) {
  //display.clearDisplay();
  randomByte = random(256);
//  display.setCursor(100,0);             
//  display.println("   ");
//  display.display();
  char hexString[10]; // Buffer to store the formatted string

  sprintf(hexString, "0x%02X", randomByte); // Format as "0xXX"
  
  display.setCursor(100, pos);             
  display.println(hexString);

  return randomByte;
  //display.display();

}

byte generate_top_hex(int health, int wait) {
  //display.clearDisplay();
  char hexString[10];

  if( bossHexStartTime + wait < millis() ) {
    bossHexStartTime = millis();
    if (meter <= health) {
      meter = meter + 1; 
    }

  }
  switch (meter) {
      case 0:
        boss_byte_0 = random();
        sprintf(hexString, "0x%02X", boss_byte_0); // Format as "0xXX"
        display.setCursor(0,0);  
        display.println(hexString);
        break;
      case 1:
        boss_byte_1 = random();
        sprintf(hexString, "%02X", boss_byte_1); // Format as "0xXX"
        display.setCursor(25,0);  
        display.println(hexString);
        break;
      case 2:
        boss_byte_2 = random();
        sprintf(hexString, "%02X", boss_byte_2); // Format as "0xXX"
        display.setCursor(37,0);  
        display.println(hexString);
        break;
      case 3:
        boss_byte_3 = random();
        sprintf(hexString, "%02X", boss_byte_3); // Format as "0xXX"
        display.setCursor(50,0);  
        display.println(hexString);
        break;

  }
}


byte display_top_hex() {
  //display.clearDisplay();
  uint8_t display_meter = meter - 1; 
  char hexString[10]; // Buffer to store the formatted string

  switch (display_meter) {
      case 0:
        sprintf(hexString, "0x%02X", boss_byte_0); // Format as "0xXX"
        display.setCursor(0,0);  
        display.println(hexString);
        break;
      case 1:
        sprintf(hexString, "0x%02X", boss_byte_0); // Format as "0xXX"
        display.setCursor(0,0);  
        display.println(hexString);
        sprintf(hexString, "%02X", boss_byte_1); // Format as "0xXX"
        display.setCursor(25,0);  
        display.println(hexString);
        break;
      case 2:
        sprintf(hexString, "0x%02X", boss_byte_0); // Format as "0xXX"
        display.setCursor(0,0);  
        display.println(hexString);
        sprintf(hexString, "%02X", boss_byte_1); // Format as "0xXX"
        display.setCursor(25,0);  
        display.println(hexString);
        sprintf(hexString, "%02X", boss_byte_2); // Format as "0xXX"
        display.setCursor(37,0);  
        display.println(hexString);
        break;
      case 3:
        sprintf(hexString, "0x%02X", boss_byte_0); // Format as "0xXX"
        display.setCursor(0,0);  
        display.println(hexString);
        sprintf(hexString, "%02X", boss_byte_1); // Format as "0xXX"
        display.setCursor(25,0);  
        display.println(hexString);
        sprintf(hexString, "%02X", boss_byte_2); // Format as "0xXX"
        display.setCursor(37,0);  
        display.println(hexString);
        sprintf(hexString, "%02X", boss_byte_3); // Format as "0xXX"
        display.setCursor(50,0);  
        display.println(hexString);
        break;

  }

}


void show_hex(byte hex, int pos) {
  char hexString[10]; // Buffer to store the formatted string

  sprintf(hexString, "0x%02X", hex); // Format as "0xXX"
  
  display.setCursor(100,pos);             
  display.println(hexString);
  //display.display();

}


void print_operator(uint8_t id, uint8_t pos) {
    switch (id) {
      case 0:
        display.setCursor(90, pos);             
        display.println("+");
        break;
      case 1:
        display.setCursor(90, pos);             
        display.println("-");
        break;
      case 2:
        display.setCursor(90, pos);             
        display.println("/");
        break;
      case 3:
        display.setCursor(90, pos);             
        display.println("*");
        break;
      case 4:
        display.setCursor(90, pos);             
        display.println("_");
        break;
      case 5:
        display.setCursor(90, pos);             
        display.println("B");
        break;
        break;
      case 6:
        display.setCursor(90, pos);             
        display.println("2");
        break;
      case 7:
        display.setCursor(90, pos);             
        display.println("<");
        break;
      case 8:
        display.setCursor(90, pos);             
        display.println("S");
        break;
    }
}


void execute_mode() {
    switch (playerMode) {
      case 0:
        playerMode = 1;
        break;
      case 1:
        playerMode = 2;
        break;
      case 2:
        playerMode = 3;
        break;
      case 3:
        playerMode = 4;
        break;
      case 4:
        playerMode = 0;
        num_stack_len = 0;
        break;
    }
}


void change_operator() {
    switch (operator_id) {
      case 0:
        operator_id = 1;
        break;
      case 1:
        operator_id = 2;
        break;
      case 2:
        operator_id = 3;
        break;
      case 3:
        operator_id = 4;
        break;
      case 4:
        operator_id = 5;
        break;
      case 5:
        operator_id = 6;
        break;
      case 6:
        operator_id = 7;
        break;
      case 7:
        operator_id = 8;
        break;
      case 8:
        operator_id = 0;
        break;


    }
}

void execute_operation() {
    switch (operator_pos) {
      case 0:
        calculate_operation(playerByte1, playerByte2);
        break;
      case 10:
        calculate_operation(playerByte1, playerByte2);
        set_new_value();
        break;
      case 20:
        calculate_operation(playerByte2, playerByte3);
        set_new_value();
        break;
      case 30:
        calculate_operation(playerByte3, playerByte4);
        set_new_value();
        break;
    }
}

void calculate_operation(byte first, byte second) {
    int8_t s_second = second;          
    switch (operator_id) {
      case 0:
        new_value = first + second;
        break;
      case 1:
        new_value = first - second;
        break;
      case 2:
        new_value = first / second;
        break;
      case 3:
        new_value = first * second;
        break;
      case 4:
        shift_values();
        break;
      case 5:
        frame_id = 5;
        break;
      case 6:
        boss_byte_0 = boss_byte_0 + s_second;
        frame_id = 7;
        break;
      case 7:
        boss_byte_0 = boss_byte_0 << 1;
        frame_id = 9;
        break;
      case 8:
        second = (second << 1) | (1 & 1);
        frame_id = 11;
        break;
    }
}

void shift_values() {
    switch (operator_pos) {
      case 0:
        playerByte1 = playerByte2;
        playerByte2 = playerByte3;
        playerByte3 = playerByte4;
        //show_hex(playerByte1, 0);
        break;
      case 10:
        //new_value = first - second;
        shift_mode();
        break;
      case 20:
        shift_mode();
        break;
      case 30:
        shift_mode();
        break;
      case 40:
        //shift_values();
        break;
    }
  
}

void shift_mode() {
    switch (playerMode) {
      case 0:
//        playerByte1 = playerByte2;
//        playerByte2 = playerByte3;
//        playerByte3 = playerByte4;
        //show_hex(playerByte1, 0);
        break;
      case 1:
        shift_player_bytes();
        playerMode = playerMode - 1;
        break;
      case 2:
        shift_player_bytes();
        playerMode = playerMode - 1;
        //new_value = first / second;
        break;
      case 3:
        shift_player_bytes();
        playerMode = playerMode - 1;
        //new_value = first * second;
        break;
      case 4:
        shift_player_bytes();
        playerMode = playerMode - 1;
        break;
    }
  
}

void shift_player_bytes() {
    switch (operator_pos) {
      case 0:
        playerByte1 = playerByte2;
        break;
      case 10:
        playerByte1 = playerByte2;
        //playerMode = 0;
        break;
      case 20:
        playerByte1 = playerByte2;
        playerByte2 = playerByte3;
        //playerMode = 0;
        //new_value = first / second;
        break;
      case 30:
        playerByte1 = playerByte2;
        playerByte2 = playerByte3;
        playerByte3 = playerByte4;
        //new_value = first * second;
        break;
      case 40:
        //shift_values();
        break;
    }
  
}

void set_new_value() {
    switch (operator_pos) {
      case 0:
        //playerByte2 = new_value;
        break;
      case 10:
        playerByte2 = new_value;
        break;
      case 20:
        playerByte3 = new_value;
        break;
      case 30:
        playerByte4 = new_value;
        break;
    }
}

void move_operator() {
    switch (operator_pos) {
      case 0:
        operator_pos = 10;
        break;
      case 10:
        operator_pos = 20;
        break;
      case 20:
        operator_pos = 30;
        break;
      case 30:
        operator_pos = 0;
        break;

    }
}


void next_frame(uint8_t wait) {
  if( frame_1_startTime + wait < millis() ) {
    //frame_1_startTime = millis();
    switch (frame_number) {
    case 0:
      //display.clearDisplay();
      display.drawBitmap(0, 10, epd_bitmap_um_frame1, 56, 56, 1);
      //display.display();
      frame_number++;
      break;
    case 1:
      //display.clearDisplay();
      display.drawBitmap(0, 10, epd_bitmap_um_frame2, 56, 56, 1);
      //display.display();
      frame_number++;
      break;
    case 2:
      //display.clearDisplay();
      display.drawBitmap(0, 10, epd_bitmap_um_frame3, 56, 56, 1);
      //display.display();
      frame_number++;
      break;
    case 3:
      //display.clearDisplay();
      display.drawBitmap(0, 10, epd_bitmap_um_frame4, 56, 56, 1);
      //display.display();
      frame_number++;
      break;
    case 4:
      //display.clearDisplay();
      display.drawBitmap(0, 10, epd_bitmap_um_frame5, 56, 56, 1);
      //display.display();
      frame_number++;
      break;
    case 5:
      //display.clearDisplay();
      display.drawBitmap(0, 10, epd_bitmap_um_frame6, 56, 56, 1);
      //display.display();
      frame_number = 0;
      break;
    }
  }
}

void next_frame_sword(int wait) {
    switch (frame_number_sword) {
    case 0:
      //display.clearDisplay();
      display.drawBitmap(20 + frame_sword_mov, 10, epd_bitmap_sword, 23, 54, 1);
      //display.display();
      //frame_number_sword++;
      break;
    case 1:
      //display.clearDisplay();
      display.drawBitmap(10 + frame_sword_mov, 20, epd_bitmap_sword_90, 54, 23, 1);
      //display.display();
      //frame_number_sword++;
      break;
    case 2:
      //display.clearDisplay();
      display.drawBitmap(20 + frame_sword_mov, 10, epd_bitmap_sword_180, 23, 54, 1);
      //display.display();
      //frame_number_sword++;
      break;
    case 3:
      //display.clearDisplay();
      display.drawBitmap(10 + frame_sword_mov, 20, epd_bitmap_sword_270, 54, 23, 1);
      //display.display();
      //frame_number_sword = 0;
      break;
    case 4:
      //display.clearDisplay();
      display.drawBitmap(20 + frame_sword_mov, 10, epd_bitmap_sword_180, 23, 54, 1);

      display.drawBitmap(10, 20, epd_bitmap_binary, 80, 12, 1);
      display.drawBitmap(10, 40, epd_bitmap_blade, 70, 12, 1);
      //display.drawBitmap(20 + frame_sword_mov, 10, epd_bitmap_sword_180, 23, 54, 1);
      display.display();

      delay(2000);
      
      frame_number_sword = 0;
      frame_id = 0;
      frame_sword_mov = 0;
      //display.display();
      //frame_number_sword = 0;
      break;
    }

  if( startTime + wait < millis() ) {
      startTime = millis();

    if (frame_number_sword >= 3) {
      frame_number_sword = 0;
      frame_sword_mov = frame_sword_mov + 10;

      if (frame_sword_mov == 80) {
        frame_number_sword = 4;
        display.drawBitmap(20 + frame_sword_mov, 10, epd_bitmap_sword_180, 23, 54, 1);

      }
    } else if (frame_number_sword != 4) {
      frame_number_sword++;
    }
  }
}

void next_frame_drag(int wait) {
  
  switch (frame_number_drag) {
    case 0:
      //display.clearDisplay();
      display.drawBitmap(24, 10, epd_bitmap_drag1, 74, 59, 1);
      //display.display();
      //frame_number_drag++;
      break;
    case 1:
      //display.clearDisplay();
      display.drawBitmap(24, 10, epd_bitmap_drag2, 74, 59, 1);
      //display.display();
      //frame_number_drag++;
      break;
    case 2:
      //display.clearDisplay();
      display.drawBitmap(24, 10, epd_bitmap_drag3, 74, 59, 1);
      //display.display();
      //frame_number_drag++;
      break;
    case 3:
      //display.clearDisplay();
      display.drawBitmap(24, 10, epd_bitmap_drag4, 74, 59, 1);
      //display.display();
      //frame_number_drag++;
      break;
    case 4:
      //display.clearDisplay();
      display.drawBitmap(24, 10, epd_bitmap_drag5, 74, 59, 1);
      //display.display();
      //frame_number_drag++;
      break;
    case 5:
      //display.clearDisplay();
      display.drawBitmap(24, 10, epd_bitmap_drag6, 74, 59, 1);
      //display.display();
      //frame_number_drag = 0;
      break;
    }

    if( shiftLeftStartTime + wait < millis() ) {
      shiftLeftStartTime = millis();
      frame_number_drag++;
    } else if (frame_number_drag == 3) {
      shiftLeftStartTime = millis();
      frame_number_drag = 0;        
      
      if (drag_loops < 3){
          drag_loops++;
        } else {
          drag_loops=0;
          frame_id = 0;
        }
    }
}


void next_frame_pory(int wait) {
  
  switch (frame_number_pory) {
    case 0:
      //display.clearDisplay();
      display.drawBitmap(24, 10, epd_bitmap_pory1, 48, 48, 1);
      //display.display();
      //frame_number_drag++;
      break;
    case 1:
      //display.clearDisplay();
      display.drawBitmap(24, 10, epd_bitmap_pory2, 48, 48, 1);
      //display.display();
      //frame_number_drag++;
      break;
    }

    if( poryStartTime + wait < millis() ) {
      poryStartTime = millis();
      frame_number_pory++;
    } else if (frame_number_pory == 3) {
      poryStartTime = millis();
      frame_number_pory = 0;        
      
      if (drag_loops < 3){
          drag_loops++;
        } else {
          drag_loops=0;
          frame_id = 0;
        }
    }
}

void two_comp() {
  display.clearDisplay();

  char letter = '1';
  
  for (int x = 0; x < screenWidth; x += 6) {
    for (int y = 0; y < screenHeight; y += 10) {
      //delay(10); 
      display.setCursor(x, y);
      display.print(letter);

      letter++;
      if (letter > '1') {
        letter = '0';
      }
    }
    display.display();
  }
  
  display.clearDisplay();
  display.drawBitmap(5, 20, epd_bitmap_2s, 22, 9, 1);
  display.drawBitmap(5, 40, epd_bitmap_comp, 103, 9, 1);
  display.display();
//  display.setCursor(35, 20);
//  display.print("1010101010");
//
//  display.setCursor(0, 5);
//  display.print("01101100");

  display.display();

  delay(2000); 

  frame_id = 0;
  
}

void show_next_frame() {
    switch (frame_id) {
      case 5:
        next_frame_sword(25);
        break;
      case 7:
        two_comp();
        break;
      case 9:
        next_frame_drag(75);
        break;
      case 11:
        next_frame_pory(75);
        break;
      default:
        next_frame(200);
        break;
    }
}

 
void loop() {

  display.clearDisplay();
  generate_top_hex(3, 2000);
  display_top_hex();

  //frame_id = 9;

  //two_comp();
  char shift_string[1];
  char sign_string[1];

  sprintf(sign_string, "%d", signed_bits); // Format as "0xXX"
  display.setCursor(80, 55);  
  display.println(sign_string);

  sprintf(shift_string, "%d", shift_bits); // Format as "0xXX"
  display.setCursor(70, 55);  
  display.println(sign_string);
  
  pixels.show(); // This sends the updated pixel color to the hardware.

  rainbow(1000);
  show_next_frame();
  //next_frame(200);
  //next_frame_sword(25);

  digitalWrite(12, HIGH);  // turn the LED on (HIGH is the voltage level)
  //delay(1000);                      // wait for a second
  digitalWrite(12, LOW);   // turn the LED off by making the voltage LOW
  //delay(1000);                      // wait for a second

  if ( buttonStartTime + BUTTON_DELAY < millis() ) {
    buttonStartTime = millis();
    buttonState_8 = digitalRead(8);
    if (buttonState_8 == LOW) {
      change_operator();
    }

  
    buttonState_7 = digitalRead(7);
    if (buttonState_7 == LOW) {
      execute_mode();
      frame_id = 0;
      rotate = true;
      if (num_stack_len < 3) {
        num_stack_len++; 
      }
      if (operator_pos < 30) {
        operator_pos = operator_pos + 10;    
      }
    }

    buttonState_2 = digitalRead(2);
    if (buttonState_2 == LOW) {
      move_operator();
    }

    buttonState_4 = digitalRead(4);
    if (buttonState_4 == LOW) {
      execute_operation();
    }
  }

if(frame_id <5) {
  switch(playerMode) {
    case 0:
      playerByte1 = rotate_hex(0);
      operator_pos = 0;
 
      print_operator(operator_id, operator_pos);
      break;
    case 1:
      show_hex(playerByte1, 0);
      if (rotate) {
        playerByte2 = rotate_hex(10);  
      } else {
        show_hex(playerByte2, 10);
      }
      
      print_operator(operator_id, operator_pos);
      break;
    case 2:
      show_hex(playerByte1, 0);
      show_hex(playerByte2, 10);
      if (rotate) {
        playerByte3 = rotate_hex(20);
      } else {
        show_hex(playerByte3, 20);
      }
      print_operator(operator_id, operator_pos);
      break;
    case 3:
      show_hex(playerByte1, 0);
      show_hex(playerByte2, 10);
      show_hex(playerByte3, 20);
      if (rotate) {
        playerByte4 = rotate_hex(30);
      } else {
        show_hex(playerByte4, 30);
      }
      print_operator(operator_id, operator_pos);
      break;
    case 4:
      show_hex(playerByte1, 0);
      show_hex(playerByte2, 10);
      show_hex(playerByte3, 20);
      show_hex(playerByte4, 30);
      print_operator(operator_id, operator_pos);
      rotate = false;
      break;
  }
}

  display.display();

}
