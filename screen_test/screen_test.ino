/*********
  Rui Santos
  Complete project details at https://randomnerdtutorials.com  
  https://javl.github.io/image2cpp/ -> white background
  GMP -> greyscale -> flatten image -> export to bitmap
*********/

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_NeoPixel.h>
#define NUMPIXELS        25
Adafruit_NeoPixel pixels(NUMPIXELS, 6, NEO_GRB + NEO_KHZ800);

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

unsigned long startTime; 

unsigned int frame_number = 0; 
unsigned int frame_number_sword = 0;
uint8_t frame_sword_mov = 0;
uint8_t num_stack_len = 0;

unsigned int brightness = 120; 

unsigned int operation = 0; 

unsigned int fadeDirection = 1; 

byte randomByte = 0xff;

byte playerMode = 0;

byte playerByte1 = 0xff;
byte playerByte2 = 0xff;
byte playerByte3 = 0xff;
byte playerByte4 = 0xff;
byte new_value = 0xff;

int operator_id = 0;
int operator_pos = 0;

int BUTTON_DELAY = 1000;


// 'sword', 23x54px
const unsigned char epd_bitmap_sword [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x81, 0x00, 0x01, 
  0xc3, 0x00, 0x01, 0xc7, 0x00, 0x01, 0x8f, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 
  0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 
  0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 
  0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 
  0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 
  0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x8d, 0x00, 0x01, 0x85, 0x00, 0x30, 0x00, 0x18, 0x7f, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00
};

// 'sword', 54x23px
const unsigned char epd_bitmap_sword_90 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xc0, 0x30, 
  0x00, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x27, 0xac, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x27, 0xa8, 0x9f, 0xff, 0xff, 0xfe, 0x00, 0x30, 0x00, 0xbf, 0xff, 0xff, 
  0xff, 0x00, 0x30, 0x00, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xc0, 
  0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00
};

// 'sword', 23x54px
const unsigned char epd_bitmap_sword_180 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0xff, 0xfc, 0x30, 0x00, 0x18, 0x01, 0x43, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 
  0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 
  0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 
  0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 
  0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 
  0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0x63, 0x00, 0x01, 0xe3, 0x00, 0x01, 0xc7, 0x00, 
  0x01, 0x87, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00
};

// 'sword', 54x23px
const unsigned char epd_bitmap_sword_270 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x30, 0x03, 
  0xff, 0xff, 0xff, 0xf4, 0x00, 0x30, 0x01, 0xff, 0xff, 0xff, 0xe4, 0x57, 0x90, 0x00, 0x00, 0x00, 
  0x00, 0x04, 0xd7, 0x90, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 
  0x00, 0x30, 0x0f, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00
};




const unsigned char epd_bitmap_um_frame1 [] PROGMEM = {
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xef, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x7f, 
  0xf0, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0xfe, 0x70, 0x7f, 
  0xff, 0xff, 0xff, 0xc1, 0xfc, 0x78, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x78, 0x39, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x10, 0x1b, 0xff, 0xff, 0xff, 0xff, 0x9c, 0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0x24, 
  0x00, 0x0f, 0xff, 0xc0, 0xff, 0xff, 0x4c, 0x00, 0x3f, 0xff, 0x00, 0xff, 0xfe, 0x58, 0x01, 0xff, 
  0xfd, 0xc1, 0xff, 0xff, 0x70, 0x03, 0xff, 0xfb, 0xe1, 0xff, 0xfe, 0x03, 0x03, 0xff, 0xf0, 0xf3, 
  0xff, 0xfc, 0x03, 0x03, 0xff, 0xe0, 0x73, 0xff, 0xfc, 0x02, 0x03, 0xff, 0xc0, 0x77, 0xff, 0xfc, 
  0x00, 0x07, 0xff, 0xc0, 0x37, 0xff, 0xfe, 0x00, 0x07, 0xff, 0x80, 0x2f, 0xff, 0xff, 0x00, 0x07, 
  0xff, 0x80, 0x1f, 0xff, 0xff, 0xc0, 0x07, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x03, 0xc0, 0x07, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x1b, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x25, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x00, 0x32, 0xff, 
  0xff, 0xff, 0xf8, 0x09, 0x40, 0x12, 0xff, 0xff, 0xff, 0xf0, 0x09, 0x60, 0x0c, 0x7f, 0xff, 0xff, 
  0xf0, 0x09, 0x70, 0x60, 0x7f, 0xff, 0xff, 0xf0, 0x46, 0xf8, 0x70, 0x7f, 0xff, 0xff, 0xf0, 0x40, 
  0xf8, 0x70, 0x7f, 0xff, 0xff, 0xf0, 0x40, 0xf8, 0x78, 0x3f, 0xff, 0xff, 0xe0, 0xc0, 0xf0, 0x78, 
  0x3f, 0xff, 0xff, 0xe0, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xe1, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 
  0xff, 0xc1, 0x83, 0xf1, 0xf0, 0x7f, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe3, 
  0x07, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_um_frame2 [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x3f, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xe1, 0x7f, 0x80, 0x3f, 
  0xff, 0xff, 0xff, 0xe0, 0x7e, 0x70, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0xfc, 0x38, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x78, 0x39, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x10, 0x1b, 0xff, 0xff, 0xff, 0xff, 0x9c, 
  0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x4c, 0x00, 0x3f, 
  0xff, 0xef, 0xff, 0xfe, 0x58, 0x01, 0xff, 0xff, 0x80, 0x7f, 0xff, 0x70, 0x03, 0xff, 0xfe, 0xe0, 
  0x7f, 0xfe, 0x02, 0x03, 0xff, 0xfd, 0xf0, 0xff, 0xfc, 0x03, 0x03, 0xff, 0xf8, 0x70, 0xff, 0xfc, 
  0x02, 0x03, 0xff, 0xf0, 0x39, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xe0, 0x39, 0xff, 0xfe, 0x00, 0x07, 
  0xff, 0xe0, 0x1b, 0xff, 0xff, 0x00, 0x07, 0xf8, 0x40, 0x1b, 0xff, 0xff, 0xc0, 0x03, 0xc0, 0x00, 
  0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x1b, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x25, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x00, 0x32, 0xff, 
  0xff, 0xff, 0xf8, 0x09, 0x40, 0x12, 0xff, 0xff, 0xff, 0xf0, 0x09, 0x60, 0x0c, 0x7f, 0xff, 0xff, 
  0xf0, 0x09, 0x70, 0x60, 0x7f, 0xff, 0xff, 0xf0, 0x46, 0xf8, 0x70, 0x7f, 0xff, 0xff, 0xf0, 0x40, 
  0xf8, 0x70, 0x7f, 0xff, 0xff, 0xf0, 0x40, 0xf8, 0x78, 0x3f, 0xff, 0xff, 0xe0, 0xc0, 0xf0, 0x78, 
  0x3f, 0xff, 0xff, 0xe0, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xe1, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 
  0xff, 0xc1, 0x83, 0xf1, 0xf0, 0x7f, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe3, 
  0x07, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_um_frame3 [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x3f, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf0, 0x3f, 
  0xff, 0xff, 0xff, 0xe3, 0x3f, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xe1, 0x7e, 0x70, 0xff, 0xff, 0xff, 
  0xff, 0xe0, 0x7c, 0x39, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xf8, 0x3b, 0xff, 0xff, 0xff, 0xff, 0xc0, 
  0x10, 0x1b, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0x9c, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x58, 0x03, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0x70, 0x03, 0xff, 0xfe, 0xe0, 0x3f, 0xfe, 
  0x02, 0x03, 0xff, 0xfd, 0xe0, 0xff, 0xfc, 0x03, 0x03, 0xff, 0xf8, 0x70, 0xff, 0xfc, 0x02, 0x07, 
  0xff, 0xe0, 0x39, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xe0, 0x39, 0xff, 0xfe, 0x00, 0x07, 0xf8, 0x40, 
  0x1b, 0xff, 0xff, 0x80, 0x03, 0xc0, 0x00, 0x1b, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x17, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1b, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x25, 0xff, 
  0xff, 0xff, 0xf8, 0x06, 0x00, 0x35, 0xff, 0xff, 0xff, 0xf8, 0x09, 0x40, 0x15, 0xff, 0xff, 0xff, 
  0xf0, 0x09, 0x60, 0x0c, 0x7f, 0xff, 0xff, 0xf0, 0x09, 0x70, 0x60, 0x7f, 0xff, 0xff, 0xf0, 0x46, 
  0xf8, 0x70, 0x7f, 0xff, 0xff, 0xf0, 0x40, 0xf8, 0x78, 0x3f, 0xff, 0xff, 0xe0, 0xc0, 0xf0, 0x78, 
  0x3f, 0xff, 0xff, 0xe0, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xe1, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 
  0xff, 0xc1, 0x83, 0xf1, 0xf0, 0x7f, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe3, 
  0x07, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_um_frame4 [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xe0, 0x7f, 
  0xff, 0xff, 0xff, 0xec, 0x3f, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x60, 0x7f, 0xff, 0xff, 
  0xff, 0xe3, 0x3e, 0x78, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x7c, 0x39, 0xff, 0xff, 0xff, 0xff, 0xe0, 
  0x78, 0x1b, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xf0, 0x17, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x20, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0x98, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x28, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xfe, 0x58, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x58, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 
  0x50, 0x03, 0xff, 0xff, 0x80, 0xff, 0xff, 0x72, 0x03, 0xff, 0xfe, 0xe0, 0x7f, 0xfe, 0x03, 0x03, 
  0xff, 0xf3, 0xe0, 0x7f, 0xfc, 0x02, 0x07, 0xff, 0xe0, 0xe1, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xc0, 
  0x73, 0xff, 0xfc, 0x00, 0x07, 0xf8, 0x40, 0x73, 0xff, 0xfe, 0x00, 0x03, 0xc0, 0x00, 0x37, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x37, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x08, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1b, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x25, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x00, 0x32, 0xff, 0xff, 0xff, 
  0xf8, 0x09, 0x40, 0x12, 0xff, 0xff, 0xff, 0xf0, 0x09, 0x60, 0x0c, 0x7f, 0xff, 0xff, 0xf0, 0x09, 
  0x70, 0x60, 0x7f, 0xff, 0xff, 0xf0, 0x46, 0xf8, 0x70, 0x3f, 0xff, 0xff, 0xe0, 0xc0, 0xf0, 0x78, 
  0x3f, 0xff, 0xff, 0xe0, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xe1, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 
  0xff, 0xc1, 0x83, 0xf1, 0xf0, 0x7f, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe3, 
  0x07, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_um_frame5 [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x7f, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xec, 0x7f, 0xe0, 0x7f, 0xff, 0xff, 
  0xff, 0xee, 0x7f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xd7, 0x3e, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xe1, 
  0x7c, 0x73, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x78, 0x77, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xf0, 0x1b, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x30, 0x17, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xb8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x48, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfe, 
  0x18, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xb0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x70, 0x03, 
  0xff, 0xff, 0x81, 0xff, 0xff, 0x42, 0x03, 0xff, 0xfc, 0xe0, 0x7f, 0xfe, 0x03, 0x07, 0xff, 0xf9, 
  0xe0, 0x7f, 0xfc, 0x02, 0x07, 0xf8, 0x40, 0x70, 0xff, 0xfc, 0x00, 0x03, 0xc0, 0x00, 0x71, 0xff, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x73, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x37, 0xff, 0xff, 0xa0, 
  0x00, 0x00, 0x00, 0x37, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x04, 0xbf, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1b, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x25, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x00, 0x32, 0xff, 0xff, 0xff, 
  0xf8, 0x09, 0x40, 0x12, 0xff, 0xff, 0xff, 0xf0, 0x09, 0x60, 0x0c, 0x7f, 0xff, 0xff, 0xf0, 0x09, 
  0x70, 0x60, 0x7f, 0xff, 0xff, 0xf0, 0x46, 0xf8, 0x70, 0x3f, 0xff, 0xff, 0xe0, 0xc0, 0xf0, 0x78, 
  0x3f, 0xff, 0xff, 0xe0, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xe1, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 
  0xff, 0xc1, 0x83, 0xf1, 0xf0, 0x7f, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe3, 
  0x07, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_um_frame6 [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xe0, 0x7f, 
  0xff, 0xff, 0xff, 0xec, 0x3f, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x60, 0x7f, 0xff, 0xff, 
  0xff, 0xe3, 0x3e, 0x78, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x7c, 0x39, 0xff, 0xff, 0xff, 0xff, 0xe0, 
  0x78, 0x1b, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xf0, 0x17, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x20, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0x98, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x28, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xfe, 0x58, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x58, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 
  0x50, 0x03, 0xff, 0xff, 0x80, 0xff, 0xff, 0x72, 0x03, 0xff, 0xfe, 0xe0, 0x7f, 0xfe, 0x00, 0x03, 
  0xff, 0xf3, 0xe0, 0x7f, 0xfc, 0x00, 0x07, 0xff, 0xe0, 0xe1, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xc0, 
  0x73, 0xff, 0xfc, 0x00, 0x07, 0xf8, 0x40, 0x73, 0xff, 0xfe, 0x00, 0x03, 0xc0, 0x00, 0x37, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x37, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x08, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1b, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x25, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x00, 0x32, 0xff, 0xff, 0xff, 
  0xf8, 0x09, 0x40, 0x12, 0xff, 0xff, 0xff, 0xf0, 0x09, 0x60, 0x0c, 0x7f, 0xff, 0xff, 0xf0, 0x09, 
  0x70, 0x60, 0x7f, 0xff, 0xff, 0xf0, 0x46, 0xf8, 0x70, 0x3f, 0xff, 0xff, 0xe0, 0xc0, 0xf0, 0x78, 
  0x3f, 0xff, 0xff, 0xe0, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xe1, 0xc1, 0xe0, 0xf8, 0x3f, 0xff, 
  0xff, 0xc1, 0x83, 0xf1, 0xf0, 0x7f, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe3, 
  0x07, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_binary [] PROGMEM = {
  0xff, 0xf7, 0xff, 0xbf, 0xfc, 0xff, 0xef, 0xff, 0xff, 0xfc, 0xff, 0xf7, 0xff, 0xbf, 0xfc, 0xff, 
  0xef, 0xff, 0xff, 0xfc, 0xc0, 0x76, 0x01, 0xb8, 0x0c, 0xc0, 0x6c, 0x03, 0xf3, 0x8c, 0xce, 0x37, 
  0x87, 0xb9, 0x8c, 0xfc, 0x6c, 0x63, 0xf3, 0x8c, 0xce, 0x77, 0x87, 0xb9, 0x8c, 0xfc, 0x6c, 0x63, 
  0xf3, 0x8c, 0xc0, 0xf1, 0x87, 0x39, 0x8c, 0xc0, 0x6c, 0x63, 0xf0, 0x0c, 0xc0, 0xf1, 0x87, 0x39, 
  0x8c, 0xc0, 0x6c, 0x73, 0xf0, 0x0c, 0xce, 0x37, 0x87, 0xb9, 0x8c, 0xcc, 0x6c, 0x7f, 0xff, 0x8c, 
  0xce, 0x37, 0x01, 0xb9, 0x8c, 0xcc, 0x6c, 0x7f, 0xff, 0x8c, 0xc0, 0x77, 0x01, 0xb9, 0x8c, 0xc0, 
  0x6c, 0x60, 0x70, 0x0c, 0xff, 0xf7, 0xff, 0xbf, 0xfc, 0xff, 0xef, 0xe0, 0x7f, 0xfc, 0xff, 0xf7, 
  0xff, 0xbf, 0xfc, 0xff, 0xef, 0xe0, 0x7f, 0xfc
};

// 'blade', 70x12px
const unsigned char epd_bitmap_blade [] PROGMEM = {
  0x3f, 0xfe, 0xff, 0x03, 0xff, 0xc0, 0x7f, 0x3f, 0xfc, 0x3f, 0xfe, 0xff, 0x03, 0xff, 0xcf, 0x7f, 
  0x3f, 0xfc, 0x38, 0x0e, 0xe7, 0x03, 0x00, 0xcf, 0xe3, 0x30, 0x0c, 0x38, 0xce, 0xe3, 0x03, 0xfc, 
  0xcf, 0xe3, 0x33, 0x8c, 0x38, 0xde, 0xe3, 0x03, 0xfc, 0xcc, 0x03, 0x33, 0x8c, 0x38, 0x1e, 0xe3, 
  0x03, 0x00, 0xcc, 0x63, 0x30, 0x0c, 0x38, 0x1e, 0xe3, 0x03, 0x00, 0xcc, 0x63, 0x30, 0x0c, 0x38, 
  0xce, 0xe3, 0xfb, 0x1c, 0xcc, 0x63, 0x33, 0xfc, 0x38, 0xce, 0xe3, 0xfb, 0x1c, 0xcc, 0x63, 0x33, 
  0xfc, 0x38, 0x0e, 0xe0, 0x3b, 0x00, 0xcc, 0x03, 0x30, 0x0c, 0x3f, 0xfe, 0xff, 0xfb, 0xff, 0xcf, 
  0xff, 0x3f, 0xfc, 0x3f, 0xfe, 0xff, 0xfb, 0xff, 0xcf, 0xff, 0x3f, 0xfc
};




int buttonState_8 = 0;
int buttonState_7 = 0;
int buttonState_2 = 0;
int buttonState_4 = 0;

void setup() {

  Serial.begin(115200);
  
  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)
  pixels.setBrightness(30); // not so bright
  pixels.setPixelColor(0, pixels.Color(255,0,0));
  pixels.setPixelColor(1, pixels.Color(255,0,0));

  pixels.setPixelColor(2, pixels.Color(255,128,0));
  pixels.setPixelColor(3, pixels.Color(255,128,0));


  pixels.setPixelColor(4, pixels.Color(0,0,255));
  pixels.setPixelColor(5, pixels.Color(0,0,255));
  pixels.setPixelColor(6, pixels.Color(0,0,255));
  pixels.setPixelColor(7, pixels.Color(0,0,255));
  pixels.setPixelColor(8, pixels.Color(0,0,255));
  pixels.setPixelColor(9, pixels.Color(0,0,255));
  pixels.setPixelColor(10, pixels.Color(0,0,255));
  pixels.setPixelColor(11, pixels.Color(0,0,255));
  pixels.setPixelColor(12, pixels.Color(0,0,255));
  pixels.setPixelColor(13, pixels.Color(0,0,255));
  pixels.setPixelColor(14, pixels.Color(0,0,255));
  pixels.setPixelColor(15, pixels.Color(0,0,255));
  pixels.setPixelColor(16, pixels.Color(0,0,255));
  pixels.setPixelColor(17, pixels.Color(0,0,255));
  pixels.setPixelColor(18, pixels.Color(0,0,255));
  pixels.setPixelColor(19, pixels.Color(0,0,255));
  pixels.setPixelColor(20, pixels.Color(0,0,255));
  pixels.setPixelColor(21, pixels.Color(0,0,255));
  pixels.setPixelColor(22, pixels.Color(0,0,255));
  pixels.setPixelColor(23, pixels.Color(0,0,255));
  pixels.setPixelColor(24, pixels.Color(255,128,0)); 
//  pixels.setPixelColor(25, pixels.Color(255,128,0)); 

  pinMode(2, INPUT_PULLUP);
  pinMode(8, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
  pinMode(7, INPUT_PULLUP);


  pixels.show(); // This sends the updated pixel color to the hardware.
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }

  pinMode(11, OUTPUT);
  digitalWrite(11, HIGH);
  
  delay(2000); // Pause for 2 seconds
  Serial.begin(9600);

  pinMode(8, INPUT_PULLUP);
  pinMode(7, INPUT_PULLUP);
  pinMode(2, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
 
  // Clear the buffer.
  display.clearDisplay();
  
  // Draw bitmap on the screen
  //display.drawBitmap(0, 20, image_data_Saraarray, 48, 44, 1);
  //display.drawBitmap(0, 10, epd_bitmap_porygon2, 54, 54, 1);


  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(WHITE);        // Draw white text
  display.setCursor(20,20);             // Start at top-left corner
  display.println(F("Umbreon !"));
  display.display();
  randomSeed(analogRead(0));

  startTime = millis();
}


uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if (WheelPos < 85) {
    return pixels.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else if (WheelPos < 170) {
    WheelPos -= 85;
    return pixels.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  } else {
    WheelPos -= 170;
    return pixels.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  }
}


void rainbow(uint8_t wait) {
  if( startTime + wait < millis() ) {
    uint16_t i, j;

    for(j=0; j<256; j++) {
      for(i=4; i<pixels.numPixels()-1; i++) {
        if (random(pixels.numPixels()) == i)
          pixels.setPixelColor(i,255, 255, 255);
        else
          pixels.setPixelColor(i, Wheel((i+j) & 255));  
      }
      pixels.show();
    }
  }
}

void fade(uint8_t wait) {
  if( startTime + wait < millis() ) {
    
    // Change the brightness
    brightness += 5 * fadeDirection; // Adjust speed of fade
    pixels.setPixelColor(0,brightness, brightness, brightness);
    pixels.setPixelColor(1,brightness, brightness, brightness);
    pixels.show();

    // Change the direction of the fade
    if (brightness < 1 || brightness > 255) {
      fadeDirection *= -1; // Reverse the direction
    }
  }
}

byte rotate_hex(uint8_t pos) {
  //display.clearDisplay();
  randomByte = random(256);
//  display.setCursor(100,0);             
//  display.println("   ");
//  display.display();
  char hexString[10]; // Buffer to store the formatted string

  sprintf(hexString, "0x%02X", randomByte); // Format as "0xXX"
  
  display.setCursor(100, pos);             
  display.println(hexString);

  return randomByte;
  //display.display();

}


void show_hex(byte hex, int pos) {
  char hexString[10]; // Buffer to store the formatted string

  sprintf(hexString, "0x%02X", hex); // Format as "0xXX"
  
  display.setCursor(100,pos);             
  display.println(hexString);
  //display.display();

}


void print_operator(uint8_t id, uint8_t pos) {
    switch (id) {
      case 0:
        display.setCursor(90, pos);             
        display.println("+");
        break;
      case 1:
        display.setCursor(90, pos);             
        display.println("-");
        break;
      case 2:
        display.setCursor(90, pos);             
        display.println("/");
        break;
      case 3:
        display.setCursor(90, pos);             
        display.println("*");
        break;
      case 4:
        display.setCursor(90, pos);             
        display.println(">");
        break;
    }
}


void execute_mode() {
    switch (playerMode) {
      case 0:
        playerMode = 1;
        break;
      case 1:
        playerMode = 2;
        break;
      case 2:
        playerMode = 3;
        break;
      case 3:
        playerMode = 4;
        break;
      case 4:
        playerMode = 0;
        num_stack_len = 0;
        break;
    }
}


void change_operator() {
    switch (operator_id) {
      case 0:
        operator_id = 1;
        break;
      case 1:
        operator_id = 2;
        break;
      case 2:
        operator_id = 3;
        break;
      case 3:
        operator_id = 4;
        break;
      case 4:
        operator_id = 0;
        break;

    }
}


void execute_operation() {
    switch (operator_pos) {
      case 0:
        calculate_operation(playerByte1, playerByte2);
        break;
      case 10:
        calculate_operation(playerByte1, playerByte2);
        set_new_value();
        break;
      case 20:
        calculate_operation(playerByte2, playerByte3);
        set_new_value();
        break;
      case 30:
        calculate_operation(playerByte3, playerByte4);
        set_new_value();
        break;
    }
}


void calculate_operation(byte first, byte second) {
    switch (operator_id) {
      case 0:
        new_value = first + second;
        break;
      case 1:
        new_value = first - second;
        break;
      case 2:
        new_value = first / second;
        break;
      case 3:
        new_value = first * second;
        break;
      case 4:
        shift_values();
        break;
    }
}

void shift_values() {
    switch (operator_pos) {
      case 0:
        playerByte1 = playerByte2;
        playerByte2 = playerByte3;
        playerByte3 = playerByte4;
        //show_hex(playerByte1, 0);
        break;
      case 10:
        //new_value = first - second;
        shift_mode();
        break;
      case 20:
        shift_mode();
        break;
      case 30:
        shift_mode();
        break;
      case 40:
        //shift_values();
        break;
    }
  
}

void shift_mode() {
    switch (playerMode) {
      case 0:
//        playerByte1 = playerByte2;
//        playerByte2 = playerByte3;
//        playerByte3 = playerByte4;
        //show_hex(playerByte1, 0);
        break;
      case 1:
        shift_player_bytes();
        playerMode = 0;
        break;
      case 2:
        shift_player_bytes();
        playerMode = 1;
        //new_value = first / second;
        break;
      case 3:
        Serial.println("shift_mode 3");
        shift_player_bytes();
        playerMode = 2;
        //new_value = first * second;
        break;
      case 4:
        //shift_values();
        break;
    }
  
}

void shift_player_bytes() {
    switch (operator_pos) {
      case 0:
        playerByte1 = playerByte2;
        break;
      case 10:
        playerByte1 = playerByte2;
        //playerMode = 0;
        break;
      case 20:
        playerByte1 = playerByte2;
        playerByte2 = playerByte3;
        //playerMode = 0;
        //new_value = first / second;
        break;
      case 30:
        playerByte1 = playerByte2;
        playerByte2 = playerByte3;
        playerByte3 = playerByte4;
        //new_value = first * second;
        break;
      case 40:
        //shift_values();
        break;
    }
  
}

void set_new_value() {
    switch (operator_pos) {
      case 0:
        //playerByte2 = new_value;
        break;
      case 10:
        playerByte2 = new_value;
        break;
      case 20:
        playerByte3 = new_value;
        break;
      case 30:
        playerByte4 = new_value;
        break;
    }
}


void move_operator() {
    switch (operator_pos) {
      case 0:
        operator_pos = 10;
        break;
      case 10:
        operator_pos = 20;
        break;
      case 20:
        operator_pos = 30;
        break;
      case 30:
        operator_pos = 0;
        break;

    }
}


void input_right(uint8_t wait) {
    
  buttonState_8 = digitalRead(8);
  if (buttonState_8 == LOW) {
    
    
  }

}

void next_frame(uint8_t wait) {
  if( startTime + wait < millis() ) {
    switch (frame_number) {
    case 0:
      //display.clearDisplay();
      display.drawBitmap(0, 10, epd_bitmap_um_frame1, 56, 56, 1);
      //display.display();
      frame_number++;
      break;
    case 1:
      //display.clearDisplay();
      display.drawBitmap(0, 10, epd_bitmap_um_frame2, 56, 56, 1);
      //display.display();
      frame_number++;
      break;
    case 2:
      //display.clearDisplay();
      display.drawBitmap(0, 10, epd_bitmap_um_frame3, 56, 56, 1);
      //display.display();
      frame_number++;
      break;
    case 3:
      //display.clearDisplay();
      display.drawBitmap(0, 10, epd_bitmap_um_frame4, 56, 56, 1);
      //display.display();
      frame_number++;
      break;
    case 4:
      //display.clearDisplay();
      display.drawBitmap(0, 10, epd_bitmap_um_frame5, 56, 56, 1);
      //display.display();
      frame_number++;
      break;
    case 5:
      //display.clearDisplay();
      display.drawBitmap(0, 10, epd_bitmap_um_frame6, 56, 56, 1);
      //display.display();
      frame_number = 0;
      break;
    }
  }
}

void next_frame_sword(int wait) {
    switch (frame_number_sword) {
    case 0:
      //display.clearDisplay();
      display.drawBitmap(20 + frame_sword_mov, 10, epd_bitmap_sword, 23, 54, 1);
      //display.display();
      //frame_number_sword++;
      break;
    case 1:
      //display.clearDisplay();
      display.drawBitmap(10 + frame_sword_mov, 20, epd_bitmap_sword_90, 54, 23, 1);
      //display.display();
      //frame_number_sword++;
      break;
    case 2:
      //display.clearDisplay();
      display.drawBitmap(20 + frame_sword_mov, 10, epd_bitmap_sword_180, 23, 54, 1);
      //display.display();
      //frame_number_sword++;
      break;
    case 3:
      //display.clearDisplay();
      display.drawBitmap(10 + frame_sword_mov, 20, epd_bitmap_sword_270, 54, 23, 1);
      //display.display();
      //frame_number_sword = 0;
      break;
    case 4:
      //display.clearDisplay();
      display.drawBitmap(20 + frame_sword_mov, 10, epd_bitmap_sword_180, 23, 54, 1);

      display.drawBitmap(10, 20, epd_bitmap_binary, 80, 12, 1);
      display.drawBitmap(10, 40, epd_bitmap_blade, 70, 12, 1);
      //display.drawBitmap(20 + frame_sword_mov, 10, epd_bitmap_sword_180, 23, 54, 1);

      //display.display();
      //frame_number_sword = 0;
      break;
    }

  if( startTime + wait < millis() ) {
      startTime = millis();

    if (frame_number_sword == 3) {
      frame_number_sword = 0;
      frame_sword_mov = frame_sword_mov + 10;

      if (frame_sword_mov == 80) {
        frame_number_sword = 4;
        display.drawBitmap(20 + frame_sword_mov, 10, epd_bitmap_sword_180, 23, 54, 1);

      }
    } else if (frame_number_sword != 4) {
      frame_number_sword++;
    }
  }
}
 
 
void loop() {

  display.clearDisplay();
   
  pixels.show(); // This sends the updated pixel color to the hardware.

  //rainbow(1000);
  next_frame(200);
  //next_frame_sword(25);

  digitalWrite(12, HIGH);  // turn the LED on (HIGH is the voltage level)
  //delay(1000);                      // wait for a second
  digitalWrite(12, LOW);   // turn the LED off by making the voltage LOW
  //delay(1000);                      // wait for a second

  if ( startTime + BUTTON_DELAY < millis() ) {
    buttonState_8 = digitalRead(8);
    if (buttonState_8 == LOW) {
      Serial.println("hello");
      change_operator();
    }

  
    buttonState_7 = digitalRead(7);
    if (buttonState_7 == LOW) {
      execute_mode();
      if (num_stack_len < 3) {
        num_stack_len++; 
      }
      if (operator_pos < 30) {
        operator_pos = operator_pos + 10;    
      }
      Serial.println("hey");
    }

    buttonState_2 = digitalRead(2);
    if (buttonState_2 == LOW) {
      move_operator();
      Serial.println("hey");
    }

    buttonState_4 = digitalRead(4);
    if (buttonState_4 == LOW) {
      execute_operation();
      Serial.println("asdsa");
    }
  }


  switch(playerMode) {
    case 0:
      playerByte1 = rotate_hex(0);
      operator_pos = 0;
 
      print_operator(operator_id, operator_pos);
      Serial.println("hey 1 :: " + playerMode);
      break;
    case 1:
      show_hex(playerByte1, 0);
      playerByte2 = rotate_hex(10);
      print_operator(operator_id, operator_pos);
      Serial.println("hey 2 :: " + playerMode);
      break;
    case 2:
      show_hex(playerByte1, 0);
      show_hex(playerByte2, 10);
      playerByte3 = rotate_hex(20);
      print_operator(operator_id, operator_pos);
      Serial.println("hey 2 :: " + playerMode);
      break;
    case 3:
      show_hex(playerByte1, 0);
      show_hex(playerByte2, 10);
      show_hex(playerByte3, 20);
      playerByte4 = rotate_hex(30);
      print_operator(operator_id, operator_pos);
      Serial.println("hey 2 :: " + playerMode);
      break;
    case 4:
      show_hex(playerByte1, 0);
      show_hex(playerByte2, 10);
      show_hex(playerByte3, 20);
      show_hex(playerByte4, 30);
      print_operator(operator_id, operator_pos);
      Serial.println("hey 2 :: " + playerMode);
      break;
  }

  display.display();

}
