/*********
  Rui Santos
  Complete project details at https://randomnerdtutorials.com  
  https://javl.github.io/image2cpp/ -> white background
  GMP -> greyscale -> flatten image -> export to bitmap
*********/

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_NeoPixel.h>
#define NUMPIXELS        25
Adafruit_NeoPixel pixels(NUMPIXELS, 6, NEO_GRB + NEO_KHZ800);

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// 'psyduckxcf', 56x56px
const unsigned char epd_bitmap_psyduckxcf [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xce, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x4c, 0x7f, 0xff, 0xff, 0xff, 
	0xe7, 0x3f, 0x88, 0xff, 0xff, 0xff, 0xff, 0x90, 0xff, 0xf1, 0x1f, 0xff, 0xff, 0xff, 0x43, 0xff, 
	0xf8, 0x1f, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfd, 0x80, 0xff, 0xfe, 0x6f, 
	0xff, 0xff, 0xfb, 0x87, 0x7f, 0xfd, 0xef, 0xff, 0xff, 0xf7, 0xcf, 0xbe, 0x1d, 0xcf, 0xff, 0xff, 
	0xef, 0xcd, 0xbd, 0xed, 0xf7, 0xff, 0xff, 0xef, 0xd7, 0x1b, 0xf6, 0xfb, 0xff, 0xff, 0xdf, 0xd8, 
	0xeb, 0x76, 0xfb, 0xff, 0xff, 0xdf, 0xd3, 0xf5, 0xee, 0xfd, 0xff, 0xff, 0xdf, 0xed, 0xfa, 0x1d, 
	0xfd, 0xff, 0xff, 0xcf, 0x9f, 0xdc, 0xfd, 0xfd, 0xff, 0xff, 0xe3, 0x7f, 0xff, 0x7d, 0xfd, 0xff, 
	0xff, 0xe0, 0xff, 0xff, 0x7b, 0xfd, 0xff, 0xff, 0xf0, 0xff, 0xff, 0x67, 0xcb, 0xff, 0xff, 0xf1, 
	0xff, 0xff, 0x0e, 0x83, 0xff, 0xff, 0xf9, 0xff, 0xfe, 0x15, 0x07, 0xff, 0xff, 0xfd, 0xff, 0xfe, 
	0x2a, 0x07, 0xff, 0xff, 0xfa, 0xff, 0xfd, 0x54, 0x0f, 0xff, 0xff, 0xfa, 0xff, 0xfc, 0xa8, 0x1f, 
	0xff, 0xff, 0xfb, 0x7f, 0xfb, 0x50, 0x73, 0xff, 0xff, 0xf7, 0x8f, 0xe7, 0xe8, 0x4d, 0xff, 0xff, 
	0xf7, 0xf0, 0x1f, 0xf4, 0x29, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xe8, 0x15, 0xff, 0xff, 0xf7, 0xff, 
	0xff, 0xf0, 0x0b, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xe0, 
	0x0f, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xfd, 0xff, 0xff, 0x00, 0x3f, 0xff, 
	0xff, 0xfe, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x3f, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xfe, 
	0xc0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf9, 0xf0, 0x00, 0x1d, 0xff, 0xff, 0xff, 0xf7, 0xff, 0x00, 
	0xfe, 0x7f, 0xff, 0xff, 0xf3, 0x3c, 0x7b, 0xff, 0xbf, 0xff, 0xff, 0xfc, 0xe3, 0xfb, 0x79, 0xbf, 
	0xff, 0xff, 0xff, 0x1f, 0xfc, 0x86, 0x7f, 0xff
};

// 'porygon2', 54x54px
const unsigned char PROGMEM epd_bitmap_porygon2 [] = {
	0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0xff, 0xf0, 
	0xff, 0xc3, 0xff, 0xff, 0xfc, 0xff, 0xf0, 0xff, 0xc3, 0xff, 0xff, 0xfc, 0xff, 0xcf, 0xff, 0xfc, 
	0xff, 0xff, 0xfc, 0xff, 0xcf, 0xff, 0xfc, 0xff, 0xff, 0xfc, 0xff, 0x3f, 0xff, 0xc3, 0x3f, 0xff, 
	0xfc, 0xff, 0x3f, 0xff, 0xc3, 0x3f, 0xff, 0xfc, 0xff, 0x3f, 0xff, 0x3c, 0x3f, 0xff, 0xfc, 0xff, 
	0x3f, 0xff, 0x3c, 0x3f, 0xff, 0xfc, 0xfc, 0xcf, 0xfc, 0xff, 0x0f, 0xff, 0x0c, 0xfc, 0xcf, 0xfc, 
	0xff, 0x0f, 0xff, 0x0c, 0xfc, 0xcf, 0xfc, 0xcf, 0x0f, 0xfc, 0xf0, 0xfc, 0xcf, 0xfc, 0xcf, 0x0f, 
	0xfc, 0xf0, 0xfc, 0xc0, 0xfc, 0x0f, 0x0f, 0xf3, 0xf0, 0xfc, 0xc0, 0xfc, 0x0f, 0x0f, 0xf3, 0xf0, 
	0xf0, 0x3f, 0x0c, 0xcf, 0x3f, 0xcf, 0xf0, 0xf0, 0x3f, 0x0c, 0xcf, 0x3f, 0xcf, 0xf0, 0xcf, 0xff, 
	0xf0, 0x3c, 0x3f, 0xcf, 0xf0, 0xcf, 0xff, 0xf0, 0x3c, 0x3f, 0xcf, 0xf0, 0x3f, 0xff, 0x00, 0x00, 
	0xff, 0x3f, 0xcc, 0x3f, 0xff, 0x00, 0x00, 0xff, 0x3f, 0xcc, 0xc0, 0x00, 0x00, 0x03, 0xff, 0x3f, 
	0xcc, 0xc0, 0x00, 0x00, 0x03, 0xff, 0x3f, 0xcc, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0x3f, 0x3c, 0xff, 
	0xfc, 0x00, 0x3f, 0xff, 0x3f, 0x3c, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0x3c, 0xfc, 0xff, 0xff, 0xc0, 
	0x3f, 0xff, 0x3c, 0xfc, 0xff, 0xff, 0xc0, 0x0f, 0xfc, 0x33, 0xfc, 0xff, 0xff, 0xc0, 0x0f, 0xfc, 
	0x33, 0xfc, 0xff, 0xff, 0x00, 0x00, 0x3c, 0xcf, 0xfc, 0xff, 0xff, 0x00, 0x00, 0x3c, 0xcf, 0xfc, 
	0xff, 0xff, 0x00, 0x00, 0x00, 0xcf, 0xfc, 0xff, 0xff, 0x00, 0x00, 0x00, 0xcf, 0xfc, 0xff, 0xc0, 
	0xfc, 0x00, 0x00, 0x3f, 0xfc, 0xff, 0xc0, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0xfc, 0x33, 0xff, 0x00, 
	0x00, 0x3f, 0xfc, 0xfc, 0x33, 0xff, 0x00, 0x00, 0x3f, 0xfc, 0xf3, 0xcf, 0xff, 0xc0, 0x00, 0x0f, 
	0xfc, 0xf3, 0xcf, 0xff, 0xc0, 0x00, 0x0f, 0xfc, 0xcf, 0xc0, 0x0f, 0xc0, 0x00, 0x03, 0xfc, 0xcf, 
	0xc0, 0x0f, 0xc0, 0x00, 0x03, 0xfc, 0xcf, 0xc0, 0xf3, 0x00, 0x0f, 0xfc, 0xfc, 0xcf, 0xc0, 0xf3, 
	0x00, 0x0f, 0xfc, 0xfc, 0xf0, 0xf3, 0xfc, 0x00, 0xff, 0xff, 0x3c, 0xf0, 0xf3, 0xfc, 0x00, 0xff, 
	0xff, 0x3c, 0xff, 0x00, 0xff, 0x03, 0xff, 0xff, 0x3c, 0xff, 0x00, 0xff, 0x03, 0xff, 0xff, 0x3c, 
	0xff, 0xff, 0x0f, 0xf3, 0xff, 0xfc, 0xfc, 0xff, 0xff, 0x0f, 0xf3, 0xff, 0xfc, 0xfc, 0xff, 0xff, 
	0xf0, 0x0c, 0x3f, 0xc3, 0xfc, 0xff, 0xff, 0xf0, 0x0c, 0x3f, 0xc3, 0xfc, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0x3f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xfc
};

static const unsigned char PROGMEM image_data_Saraarray[] = {
	0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xdf, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xa1, 0xff, 0xff, 0xff, 0xff, 0xff, 0x30, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf0, 0xff, 0xff, 0xff, 
	0xff, 0xfd, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa1, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x40, 0x7f, 
	0xff, 0xff, 0xff, 0xfa, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfa, 0x00, 0x63, 0xff, 0xff, 0xff, 0xfc, 
	0x30, 0x30, 0xff, 0xff, 0xff, 0xfc, 0x7c, 0x19, 0x3f, 0xff, 0xff, 0xf8, 0xff, 0x08, 0xdf, 0xff, 
	0xff, 0xf1, 0xff, 0x80, 0x6f, 0xff, 0xff, 0xf3, 0xff, 0xc0, 0x77, 0xff, 0xff, 0xe7, 0xff, 0xe0, 
	0x7b, 0xff, 0xff, 0xe7, 0xff, 0xe0, 0x6b, 0xff, 0xff, 0xcf, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xcf, 
	0xff, 0xf0, 0x01, 0xff, 0xf0, 0x59, 0xff, 0xb8, 0x00, 0x7f, 0xef, 0x90, 0xfc, 0x18, 0x07, 0x1f, 
	0xdd, 0xd0, 0xfe, 0x1c, 0x0e, 0x0f, 0xaa, 0x10, 0xff, 0x1c, 0x00, 0x07, 0x94, 0x10, 0xff, 0x1c, 
	0x00, 0x03, 0x20, 0x11, 0xff, 0x1c, 0x00, 0x03, 0x00, 0x11, 0xee, 0x1c, 0x00, 0x01, 0x00, 0x0f, 
	0xf0, 0x38, 0x00, 0x01, 0x03, 0x8f, 0xff, 0xf8, 0x00, 0x00, 0x87, 0xe3, 0xff, 0xf0, 0x00, 0x00, 
	0x87, 0xf7, 0xff, 0xc0, 0x00, 0x40, 0xd7, 0xef, 0xff, 0xe0, 0x03, 0xe4, 0xff, 0xee, 0x71, 0xe0, 
	0x07, 0xfc, 0xff, 0xf0, 0x70, 0xc0, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xc0, 0x00, 0x00, 0x6f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x17, 0xff, 0xff, 0xff, 0x00, 0x01, 0xe7, 
	0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x63, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff
};


const unsigned char epd_bitmap_umbreon [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
  0x3f, 0xfe, 0xff, 0xff, 0xe0, 0x7f, 0xfe, 0x1f, 0xfe, 0x7f, 0xff, 0xf0, 0x1f, 0xfe, 0x1f, 0xfc, 
  0x7f, 0xff, 0xf0, 0x6f, 0xfc, 0x1f, 0xfc, 0x3f, 0xff, 0xf9, 0xf7, 0xfc, 0x1f, 0xf8, 0x1f, 0xff, 
  0xf9, 0xc3, 0xfd, 0x1f, 0xf8, 0x1f, 0xff, 0xfc, 0x83, 0xfb, 0xbf, 0xf8, 0x0f, 0xff, 0xfe, 0x01, 
  0xfb, 0xbf, 0xf8, 0x0f, 0xff, 0xff, 0x01, 0xf8, 0xbf, 0xf8, 0x07, 0xff, 0xff, 0x80, 0xf8, 0x3f, 
  0xf8, 0x1f, 0xff, 0xff, 0xc0, 0x30, 0x7f, 0xfc, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xfd, 0xf3, 
  0xff, 0xff, 0xe0, 0x70, 0xff, 0xfd, 0xe3, 0xff, 0xff, 0xc0, 0x88, 0xff, 0xff, 0x83, 0xff, 0xff, 
  0xc0, 0x44, 0x7f, 0xfe, 0x01, 0xff, 0xff, 0x80, 0x38, 0x7f, 0xfe, 0x01, 0xff, 0xff, 0x86, 0x00, 
  0xbf, 0xff, 0x01, 0xff, 0xff, 0x07, 0x00, 0xbf, 0xff, 0x01, 0xff, 0xfe, 0x05, 0x00, 0xbf, 0xff, 
  0x81, 0x80, 0x78, 0x05, 0x81, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x03, 0x81, 0x7f, 0xff, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0xc0, 0x00, 
  0x01, 0xff, 0xff, 0xff, 0x81, 0x20, 0x00, 0x01, 0xff, 0xff, 0xff, 0x02, 0x30, 0x00, 0x01, 0xff, 
  0xff, 0xff, 0x02, 0x31, 0xe0, 0x01, 0xff, 0xff, 0xfe, 0x03, 0x63, 0xe0, 0x33, 0xff, 0xff, 0xfe, 
  0x01, 0xc7, 0xc0, 0x4b, 0xff, 0xff, 0xfc, 0x10, 0x0f, 0xc0, 0x4b, 0xff, 0xff, 0xfc, 0x10, 0x3f, 
  0xc1, 0x4b, 0xff, 0xff, 0xfc, 0x30, 0x7f, 0x81, 0xb3, 0xff, 0xff, 0xfc, 0x30, 0xff, 0x83, 0x81, 
  0xff, 0xff, 0xfc, 0x30, 0xff, 0x07, 0xc1, 0xff, 0xff, 0xfc, 0x30, 0xff, 0x0f, 0xc0, 0x7f, 0xff, 
  0xfc, 0x10, 0x7f, 0x1f, 0xe0, 0x3f, 0xff, 0xfe, 0x10, 0x3f, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xf0, 
  0x3f, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


int buttonState_8 = 0;


void setup() {
  Serial.begin(115200);
  
  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)
  pixels.setBrightness(30); // not so bright
  pixels.setPixelColor(0, pixels.Color(255,0,0));
  pixels.setPixelColor(1, pixels.Color(255,0,0));

  pixels.setPixelColor(2, pixels.Color(255,128,0));
  pixels.setPixelColor(3, pixels.Color(255,128,0));


  pixels.setPixelColor(4, pixels.Color(0,0,255));
  pixels.setPixelColor(5, pixels.Color(0,0,255));
  pixels.setPixelColor(6, pixels.Color(0,0,255));
  pixels.setPixelColor(7, pixels.Color(0,0,255));
  pixels.setPixelColor(8, pixels.Color(0,0,255));
  pixels.setPixelColor(9, pixels.Color(0,0,255));
  pixels.setPixelColor(10, pixels.Color(0,0,255));
  pixels.setPixelColor(11, pixels.Color(0,0,255));
  pixels.setPixelColor(12, pixels.Color(0,0,255));
  pixels.setPixelColor(13, pixels.Color(0,0,255));
  pixels.setPixelColor(14, pixels.Color(0,0,255));
  pixels.setPixelColor(15, pixels.Color(0,0,255));
  pixels.setPixelColor(16, pixels.Color(0,0,255));
  pixels.setPixelColor(17, pixels.Color(0,0,255));
  pixels.setPixelColor(18, pixels.Color(0,0,255));
  pixels.setPixelColor(19, pixels.Color(0,0,255));
  pixels.setPixelColor(20, pixels.Color(0,0,255));
  pixels.setPixelColor(21, pixels.Color(0,0,255));
  pixels.setPixelColor(22, pixels.Color(0,0,255));
  pixels.setPixelColor(23, pixels.Color(0,0,255));
  pixels.setPixelColor(24, pixels.Color(255,128,0)); 
//  pixels.setPixelColor(25, pixels.Color(255,128,0)); 

  pixels.show(); // This sends the updated pixel color to the hardware.
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }

  pinMode(11, OUTPUT);
  digitalWrite(11, HIGH);
  
  delay(2000); // Pause for 2 seconds
  Serial.begin(9600);

  pinMode(8, INPUT_PULLUP);

 
  // Clear the buffer.
  display.clearDisplay();
  
  // Draw bitmap on the screen
  //display.drawBitmap(0, 20, image_data_Saraarray, 48, 44, 1);
  //display.drawBitmap(0, 10, epd_bitmap_porygon2, 54, 54, 1);

  display.drawBitmap(0, 10, epd_bitmap_umbreon, 56, 56, 1);


  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(WHITE);        // Draw white text
  display.setCursor(20,20);             // Start at top-left corner
  display.println(F("Umbreon !"));
  display.display();
  randomSeed(analogRead(0));
}


uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if (WheelPos < 85) {
    return pixels.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else if (WheelPos < 170) {
    WheelPos -= 85;
    return pixels.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  } else {
    WheelPos -= 170;
    return pixels.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  }
}


void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=4; i<pixels.numPixels()-1; i++) {
      if (random(pixels.numPixels()) == i)
        pixels.setPixelColor(i,255, 255, 255);
      else
        pixels.setPixelColor(i, Wheel((i+j) & 255));  
    }
    pixels.show();
    delay(wait);
  }
}
 
void loop() {

   
  pixels.show(); // This sends the updated pixel color to the hardware.

  rainbow(250);

  digitalWrite(12, HIGH);  // turn the LED on (HIGH is the voltage level)
  //delay(1000);                      // wait for a second
  digitalWrite(12, LOW);   // turn the LED off by making the voltage LOW
  //delay(1000);                      // wait for a second

  buttonState_8 = digitalRead(8);
  if (buttonState_8 == LOW) {
    Serial.println("hello");
  }

//  int randNumber = random(3);
  //delay(2000);

//  switch (randNumber) {
//  case 0:
//    display.clearDisplay();
//    display.drawBitmap(0, 10, epd_bitmap_umbreon, 56, 56, 1);
//    display.display();
//    break;
//  case 1:
//    display.clearDisplay();
//    display.drawBitmap(0, 10, epd_bitmap_porygon2, 54, 54, 1);
//    display.display();
//    break;
//  case 2:
//    display.clearDisplay();
//    display.drawBitmap(0, 10, epd_bitmap_psyduckxcf, 56, 56, 1);
//    display.display();
//    break;
//  }
}
